============================= test session starts ==============================
platform linux2 -- Python 2.7.6 -- py-1.4.30 -- pytest-2.7.2 -- /home/user/envs/bin/python
rootdir: /data/norep/git/pytorch, inifile: 
collecting ... initializing PyTorch...
generator null: False
 ... PyTorch initialized
collected 9 items

test/testByteTensor.py::test_byte_tensor test_byte_tensor
a : 2 2
1 1
1 2
[torch.ByteTensor of size 3x2]

a[1][1] = 9
a : 2 2
1 9
1 2
[torch.ByteTensor of size 3x2]

a.size() : 3 2
[torch.LongTensor of size 2]

a + 2 : 4 4
3 11
3 4
[torch.ByteTensor of size 3x2]

a.resize2d(3,3).fill(1)
a : 1 1 1
1 1 1
1 1 1
[torch.ByteTensor of size 3x3]

PASSED
test/testDoubleTensor.py::test_double_tensor dir(G) ['DoubleTensor', 'LongTensor']
test_double_tensor
got double a
a.dims() : 2
a : 0.696469187271 0.712955321418
0.286139338743 0.428470924962
0.226851454936 0.690884851385
[torch.DoubleTensor of size 3x2]

a[1][1] = 9
a : 0.696469187271 0.712955321418
0.286139338743 9.0
0.226851454936 0.690884851385
[torch.DoubleTensor of size 3x2]

a.size() : 3 2
[torch.LongTensor of size 2]

a + 2 : 2.69646918727 2.71295532142
2.28613933874 11.0
2.22685145494 2.69088485138
[torch.DoubleTensor of size 3x2]

a.resize2d(3,3).fill(1)
a : 1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 1.0
[torch.DoubleTensor of size 3x3]

size = LongTensor(2)
size[0] = 4
size[1] = 2
a.resize(size)
a : 1.0 1.0
1.0 1.0
1.0 1.0
1.0 1.0
[torch.DoubleTensor of size 4x2]

DoubleTensor(3,4).uniform() : 0.551314765122 0.719150308752 0.71946897055 0.491118932609
0.423106460599 0.780027760426 0.980764200445 0.410924367839
0.684829734266 0.579694297398 0.480931907427 0.139950763201
[torch.DoubleTensor of size 3x4]

DoubleTensor(3,4).bernoulli() : 1.0 1.0 1.0 0.0
0.0 1.0 1.0 1.0
1.0 0.0 1.0 0.0
[torch.DoubleTensor of size 3x4]

DoubleTensor(3,4).normal() : -0.106521355378 -1.40956300931 0.443371677948 0.981823429942
0.18879472094 0.373145115669 -1.54765247261 -0.310894900395
-1.03570595999 -0.209924956886 -0.558430082465 -0.628628928147
[torch.DoubleTensor of size 3x4]

DoubleTensor(3,4).cauchy() : 1.95397985232 -0.024871545476 0.851125632279 0.940816270039
0.363658616721 -0.479308461518 0.840284323529 -0.266120721056
-0.621655949879 0.528352285075 -0.463718804029 -0.418631929264
[torch.DoubleTensor of size 3x4]

DoubleTensor(3,4).exponential() : 0.259111765625 0.267242881086 0.347735079957 4.42245575717
0.996893921616 1.45241685696 0.0966264758747 1.50060340379
0.568633376271 0.0283809092557 0.563633683251 0.191047338272
[torch.DoubleTensor of size 3x4]

DoubleTensor(3,4).logNormal() : 0.214799163778 0.460424347317 0.284028093204 0.561924150738
0.161898011838 5.25267607531 0.0674745401952 1.14889334788
2.06369073334 0.133202254671 1.862418385 0.265312722662
[torch.DoubleTensor of size 3x4]

DoubleTensor(3,4).geometric() : 2.0 1.0 2.0 2.0
1.0 1.0 1.0 1.0
1.0 2.0 3.0 4.0
[torch.DoubleTensor of size 3x4]

PASSED
test/testFloatTensor.py::test_float_tensor dir(G) []
test_float_tensor
got float a
a.dims() : 2
a : 0.696469 0.712955
0.286139 0.428471
0.226851 0.690885
[torch.FloatTensor of size 3x2]

a[1][1] = 9
a : 0.696469 0.712955
0.286139 9
0.226851 0.690885
[torch.FloatTensor of size 3x2]

a.size() : 3 2
[torch.LongTensor of size 2]

PASSED
test/testLongTensor.py::test_long_tensor test_long_tensor
a : 2 2
1 1
1 2
[torch.LongTensor of size 3x2]

a[1][1] = 9
a : 2 2
1 9
1 2
[torch.LongTensor of size 3x2]

a.size() : 3 2
[torch.LongTensor of size 2]

a + 2 : 4 4
3 11
3 4
[torch.LongTensor of size 3x2]

a.resize2d(3,3).fill(1)
a : 1 1 1
1 1 1
1 1 1
[torch.LongTensor of size 3x3]

PASSED
test/test_pynn.py::test_pynn Linear.__init__
linear nn.Linear(3 -> 5)
linear.weight 0.226863076317 0.245899624292 -0.246945020692
-0.0825946614558 -0.315404772043 0.220414840663
0.0592531869129 0.253052979502 0.253420938452
-0.0102549732983 -0.088789011344 0.323348205725
0.555138681088 -0.102855680412 0.213422993665
[torch.DoubleTensor of size 5x3]

linear.output [torch.DoubleTensor with no dimension]

linear.gradInput [torch.DoubleTensor with no dimension]

input 0.343178014737 0.627317003906 0.729049708461
0.324150895933 0.43857224728 0.244759279769
0.0596778981853 0.694755175151 0.398044250906
0.593902397901 0.737995401956 0.631792020286
[torch.DoubleTensor of size 4x3]

output 0.144099288489 -0.0875280099966 -0.0519137582956 0.051946816308 0.167289160953
0.212963582977 -0.133170272297 -0.223532933675 -0.0876940419269 0.0727812285874
0.17810675045 -0.158341250062 -0.135530327212 -0.0581636869042 -0.0676732944977
0.252212471678 -0.164582038292 -0.0336971757723 0.00810051994876 0.274335035433
[torch.DoubleTensor of size 4x5]

gradInput 0.129180069569 0.0280848347889 -0.0155328441158
0.087370663738 0.0381048340313 -0.151413450003
0.00848178705623 0.0715664947938 -0.14647972019
0.221025549021 0.0764655876795 -0.0459298145705
[torch.DoubleTensor of size 4x3]

criterion nn.ClassNLLCriterion
dir(linear) ['addBuffer', 'bias', 'gradBias', 'gradInput', 'gradWeight', 'output', 'weight']
output 0.144099288489 -0.0875280099966 -0.0519137582956 0.051946816308 0.167289160953
0.212963582977 -0.133170272297 -0.223532933675 -0.0876940419269 0.0727812285874
0.17810675045 -0.158341250062 -0.135530327212 -0.0581636869042 -0.0676732944977
0.252212471678 -0.164582038292 -0.0336971757723 0.00810051994876 0.274335035433
[torch.DoubleTensor of size 4x5]

Linear.__init__
got criterion
imagesTensor.size() 128 784
[torch.LongTensor of size 2]

labelsTensor.size() 128
[torch.LongTensor of size 1]

type(imagesTensor) <type 'PyTorch._DoubleTensor'>
start training...
epoch 0 accuracy: 44.53125%
epoch 1 accuracy: 90.625%
epoch 2 accuracy: 88.28125%
epoch 3 accuracy: 94.53125%
epoch 4 accuracy: 97.65625%
epoch 5 accuracy: 97.65625%
epoch 6 accuracy: 97.65625%
epoch 7 accuracy: 98.4375%
epoch 8 accuracy: 100.0%
epoch 9 accuracy: 100.0%
PASSED
test/test_pytorch.py::test_pytorchDouble D 1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 1.0
[torch.DoubleTensor of size 5x3]

D 1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 4.0
1.0 1.0 1.0
1.0 1.0 1.0
[torch.DoubleTensor of size 5x3]

D 1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 4.0
9.0 9.0 9.0
1.0 1.0 1.0
[torch.DoubleTensor of size 5x3]

D 1.0 1.0 0.0
1.0 1.0 0.0
1.0 1.0 0.0
9.0 9.0 0.0
1.0 1.0 0.0
[torch.DoubleTensor of size 5x3]

0.696469187271 0.712955321418 0.286139338743 0.428470924962
0.226851454936 0.690884851385 0.551314765122 0.719150308752
0.71946897055 0.491118932609 0.423106460599 0.780027760426
[torch.DoubleTensor of size 3x4]

1.02128143748 -0.124038772681 -0.524193971499 -1.20779411263
-0.545182313618 0.0656317261876 -0.78861971618 0.634921189764
-0.776378451589 1.17102121848 -0.116186091932 -0.87753728435
[torch.DoubleTensor of size 3x4]

-0.195412853764 -1.03348270807 -5.27115705267 0.701663339505
-0.331726194065 0.303869587949 0.927280902103 0.439439085943
-1.5488147215 -0.189922983524 -1.62666512929 -3.71369722963
[torch.DoubleTensor of size 3x4]

0.758328831478 1.24594190754 0.758918650407 0.558377661537
1.00621807048 0.353509243152 1.89333910235 0.677440721362
1.28900549091 1.34821424774 0.944236385858 0.442744821336
[torch.DoubleTensor of size 3x4]

0.356351337978 0.122049876311 0.197217357975 2.34994214246
0.202356118104 1.14136018966 0.507407633405 1.12089296391
0.16072887931 16.8918513001 0.102780625187 0.0916342699456
[torch.DoubleTensor of size 3x4]

1.0 0.0 1.0 1.0
1.0 1.0 1.0 1.0
1.0 1.0 1.0 0.0
[torch.DoubleTensor of size 3x4]

1.0 3.0 4.0 2.0
5.0 2.0 2.0 1.0
2.0 2.0 1.0 1.0
[torch.DoubleTensor of size 3x4]

1.0 1.0 1.0 2.0
3.0 4.0 1.0 1.0
1.0 1.0 7.0 1.0
[torch.DoubleTensor of size 3x4]

2.0 1.0 2.0 3.0
1.0 1.0 2.0 2.0
4.0 1.0 4.0 1.0
[torch.DoubleTensor of size 3x4]

2.0 1.0 2.0 3.0
1.0 1.0 2.0 2.0
4.0 1.0 4.0 1.0
[torch.DoubleTensor of size 3x4]

<class 'floattensor.DoubleTensor'>
D after resize:
 1.0 1.0 0.0
1.0 1.0 0.0
1.0 1.0 0.0
9.0 9.0 0.0
[torch.DoubleTensor of size 4x3]

resize1d 1.0 1.0 1.0
[torch.DoubleTensor of size 3]

resize2d 1.0 1.0 1.0
1.0 1.0 1.0
[torch.DoubleTensor of size 2x3]

resize 1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 1.0
[torch.DoubleTensor of size 4x3]

PyTorch.DoubleTensor(3,2).nElement() : 6
PyTorch.DoubleTensor().nElement() : 0
PyTorch.DoubleTensor(1).nElement() : 1
PASSED
test/test_pytorch.py::test_pytorchByte D 1 1 1
1 1 1
1 1 1
1 1 1
1 1 1
[torch.ByteTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
1 1 1
1 1 1
[torch.ByteTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
9 9 9
1 1 1
[torch.ByteTensor of size 5x3]

D 1 1 0
1 1 0
1 1 0
9 9 0
1 1 0
[torch.ByteTensor of size 5x3]

0 0 1 1
1 0 0 0
0 1 1 0
[torch.ByteTensor of size 3x4]

6 1 2 2
1 1 1 1
1 2 2 1
[torch.ByteTensor of size 3x4]

1 1 1 2
1 2 2 2
1 1 1 1
[torch.ByteTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.ByteTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.ByteTensor of size 3x4]

<class 'floattensor.ByteTensor'>
D after resize:
 1 1 0
1 1 0
1 1 0
9 9 0
[torch.ByteTensor of size 4x3]

resize1d 1 1 1
[torch.ByteTensor of size 3]

resize2d 1 1 1
1 1 1
[torch.ByteTensor of size 2x3]

resize 1 1 1
1 1 1
1 1 1
1 1 1
[torch.ByteTensor of size 4x3]

PyTorch.ByteTensor(3,2).nElement() : 6
PyTorch.ByteTensor().nElement() : 0
PyTorch.ByteTensor(1).nElement() : 1
PASSED
test/test_pytorch.py::test_pytorchFloat C [[ 0.78126878  0.68557262  0.46044704  0.29017398]
 [ 0.4116869   0.55729043  0.35089147  0.12185374]
 [ 0.85083026  0.80117935  0.5315783   0.30736649]]
calling .asTensor...
 ... asTensor called
tensorA 0.696469 0.286139
0.226851 0.551315
0.719469 0.423106
[torch.FloatTensor of size 3x2]

tensorA 0.696469 0.286139
0.226851 56.4
76.5 0.423106
[torch.FloatTensor of size 3x2]

A [[  0.69646919   0.28613934]
 [  0.22685145  56.40000153]
 [ 76.5          0.42310646]]
add 5 to tensorA
tensorA 5.69647 5.28614
5.22685 61.4
81.5 5.42311
[torch.FloatTensor of size 3x2]

A [[  5.69646931   5.28613949]
 [  5.22685146  61.40000153]
 [ 81.5          5.42310667]]
add 7 to tensorA
tensorA2 12.6965 12.2861
12.2269 68.4
88.5 12.4231
[torch.FloatTensor of size 3x2]

tensorA 5.69647 5.28614
5.22685 61.4
81.5 5.42311
[torch.FloatTensor of size 3x2]

tensorAB 7.40098 7.75497 5.05797 2.54915
26.1974 48.3432 29.4421 5.71376
81.7934 59.7673 41.5744 32.2812
[torch.FloatTensor of size 3x4]

A.dot(B) [[  7.40098      7.7549696    5.05796814   2.54915118]
 [ 26.19743919  48.34315491  29.44209671   5.71376324]
 [ 81.79337311  59.76733398  41.57437515  32.28121948]]
tensorA[2] 81.5 5.42311
[torch.FloatTensor of size 2]

D 1 1 1
1 1 1
1 1 1
1 1 1
1 1 1
[torch.FloatTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
1 1 1
1 1 1
[torch.FloatTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
9 9 9
1 1 1
[torch.FloatTensor of size 5x3]

D 1 1 0
1 1 0
1 1 0
9 9 0
1 1 0
[torch.FloatTensor of size 5x3]

0.696469 0.712955 0.286139 0.428471
0.226851 0.690885 0.551315 0.71915
0.719469 0.491119 0.423106 0.780028
[torch.FloatTensor of size 3x4]

1.02128 -0.124039 -0.524194 -1.20779
-0.545182 0.0656317 -0.78862 0.634921
-0.776378 1.17102 -0.116186 -0.877537
[torch.FloatTensor of size 3x4]

-0.195413 -1.03348 -5.27116 0.701663
-0.331726 0.30387 0.927281 0.439439
-1.54881 -0.189923 -1.62667 -3.7137
[torch.FloatTensor of size 3x4]

0.758329 1.24594 0.758919 0.558378
1.00622 0.353509 1.89334 0.677441
1.28901 1.34821 0.944236 0.442745
[torch.FloatTensor of size 3x4]

0.356351 0.12205 0.197217 2.34994
0.202356 1.14136 0.507408 1.12089
0.160729 16.8919 0.102781 0.0916343
[torch.FloatTensor of size 3x4]

1 0 1 1
1 1 1 1
1 1 1 0
[torch.FloatTensor of size 3x4]

1 3 4 2
5 2 2 1
2 2 1 1
[torch.FloatTensor of size 3x4]

1 1 1 2
3 4 1 1
1 1 7 1
[torch.FloatTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.FloatTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.FloatTensor of size 3x4]

<class 'floattensor.FloatTensor'>
D after resize:
 1 1 0
1 1 0
1 1 0
9 9 0
[torch.FloatTensor of size 4x3]

resize1d 1 1 1
[torch.FloatTensor of size 3]

resize2d 1 1 1
1 1 1
[torch.FloatTensor of size 2x3]

resize 1 1 1
1 1 1
1 1 1
1 1 1
[torch.FloatTensor of size 4x3]

PyTorch.FloatTensor(3,2).nElement() : 6
PyTorch.FloatTensor().nElement() : 0
PyTorch.FloatTensor(1).nElement() : 1
PASSED
test/test_pytorch.py::test_pytorchLong D 1 1 1
1 1 1
1 1 1
1 1 1
1 1 1
[torch.LongTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
1 1 1
1 1 1
[torch.LongTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
9 9 9
1 1 1
[torch.LongTensor of size 5x3]

D 1 1 0
1 1 0
1 1 0
9 9 0
1 1 0
[torch.LongTensor of size 5x3]

0 0 1 1
1 0 0 0
0 1 1 0
[torch.LongTensor of size 3x4]

6 1 2 2
1 1 1 1
1 2 2 1
[torch.LongTensor of size 3x4]

1 1 1 2
1 2 2 2
1 1 1 1
[torch.LongTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.LongTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.LongTensor of size 3x4]

<class 'floattensor.LongTensor'>
D after resize:
 1 1 0
1 1 0
1 1 0
9 9 0
[torch.LongTensor of size 4x3]

resize1d 1 1 1
[torch.LongTensor of size 3]

resize2d 1 1 1
1 1 1
[torch.LongTensor of size 2x3]

resize 1 1 1
1 1 1
1 1 1
1 1 1
[torch.LongTensor of size 4x3]

PyTorch.LongTensor(3,2).nElement() : 6
PyTorch.LongTensor().nElement() : 0
PyTorch.LongTensor(1).nElement() : 1
PASSED

