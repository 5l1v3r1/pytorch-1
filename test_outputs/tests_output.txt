============================= test session starts ==============================
platform linux2 -- Python 2.7.6 -- py-1.4.30 -- pytest-2.7.2 -- /home/user/envs/bin/python
rootdir: /data/norep/git/pytorch, inifile: 
collecting ... initializing PyTorch...
generator null: False
 ... PyTorch initialized
Linear.__init__
linear nn.Linear(3 -> 5)
linear.weight -0.509488919131 0.155891882983 -0.224915409403
0.251275140355 -0.383131927402 -0.557332563755
0.405300358142 0.112456319588 -0.400881354627
0.383267321171 0.141769546709 0.0464582948068
0.395974815358 0.448729125555 0.0680933616773
[torch.DoubleTensor of size 5x3]

linear.output [torch.DoubleTensor with no dimension]

linear.gradInput [torch.DoubleTensor with no dimension]

input 0.47215933376 0.508393658791 0.577418480534
0.263929422246 0.532091799891 0.297259231098
0.94096239307 0.468936286168 0.128388096811
0.542147524422 0.880081022624 0.830304380972
[torch.DoubleTensor of size 4x3]

output 0.199241758836 -0.0950691350351 0.00140375161249 -0.151731106339 0.943682685395
0.372039071508 -0.000329777004397 0.0319837190546 -0.241194872994 0.852785945666
0.0552345633363 0.288106053679 0.366980477038 0.00149074658427 1.08103522961
0.164648658423 -0.360829685928 -0.029808659006 -0.060464323187 1.1554030431
[torch.DoubleTensor of size 4x5]

gradInput 0.190689964868 0.469589110688 0.0648192030919
0.0685700081294 0.410196794703 -0.0494516419233
0.621623889766 0.424800601994 -0.246429040293
0.247700850319 0.670451587847 0.251886057067
[torch.DoubleTensor of size 4x3]

criterion nn.ClassNLLCriterion
dir(linear) ['addBuffer', 'bias', 'gradBias', 'gradInput', 'gradWeight', 'output', 'weight']
output 0.199241758836 -0.0950691350351 0.00140375161249 -0.151731106339 0.943682685395
0.372039071508 -0.000329777004397 0.0319837190546 -0.241194872994 0.852785945666
0.0552345633363 0.288106053679 0.366980477038 0.00149074658427 1.08103522961
0.164648658423 -0.360829685928 -0.029808659006 -0.060464323187 1.1554030431
[torch.DoubleTensor of size 4x5]

Linear.__init__
got criterion
imagesTensor.size() 128 784
[torch.LongTensor of size 2]

labelsTensor.size() 128
[torch.LongTensor of size 1]

type(imagesTensor) <type 'PyTorch._DoubleTensor'>
start training...
epoch 0 accuracy: 43.75%
epoch 1 accuracy: 82.8125%
epoch 2 accuracy: 92.96875%
epoch 3 accuracy: 96.875%
epoch 4 accuracy: 96.09375%
epoch 5 accuracy: 100.0%
epoch 6 accuracy: 100.0%
epoch 7 accuracy: 100.0%
epoch 8 accuracy: 100.0%
epoch 9 accuracy: 100.0%
collected 5 items

test/testByteTensor.py::test_byte_tensor test_byte_tensor
a : 5 1
1 4
2 4
[torch.ByteTensor of size 3x2]

a[1][1] = 9
a : 5 1
1 9
2 4
[torch.ByteTensor of size 3x2]

a.size() : 3 2
[torch.LongTensor of size 2]

a + 2 : 7 3
3 11
4 6
[torch.ByteTensor of size 3x2]

a.resize2d(3,3)
a : 5 1 1
9 2 4
0 0 144
[torch.ByteTensor of size 3x3]

PASSED
test/testDoubleTensor.py::test_double_tensor dir(G) ['DoubleTensor', 'LongTensor']
test_double_tensor
got double a
a.dims() : 2
a : 0.43683200283 0.764661559835
0.116995851742 0.727281856351
0.595874082996 0.904977588216
[torch.DoubleTensor of size 3x2]

a[1][1] = 9
a : 0.43683200283 0.764661559835
0.116995851742 9.0
0.595874082996 0.904977588216
[torch.DoubleTensor of size 3x2]

a.size() : 3 2
[torch.LongTensor of size 2]

a + 2 : 2.43683200283 2.76466155984
2.11699585174 11.0
2.595874083 2.90497758822
[torch.DoubleTensor of size 3x2]

a.resize2d(3,3)
a : 0.43683200283 0.764661559835 0.116995851742
9.0 0.595874082996 0.904977588216
0.0 3.48316280318e-321 6.92858530861e-310
[torch.DoubleTensor of size 3x3]

size = LongTensor(2)
size[0] = 4
size[1] = 2
a.resize(size)
a : 0.43683200283 0.764661559835
0.116995851742 9.0
0.595874082996 0.904977588216
0.0 3.48316280318e-321
[torch.DoubleTensor of size 4x2]

DoubleTensor(3,4).uniform() : 0.423668013653 0.39806193253 0.42285603215 0.352248161566
0.596469141077 0.373849636177 0.322917342652 0.513047518907
0.175430651521 0.683817638084 0.757600853685 0.939618351869
[torch.DoubleTensor of size 3x4]

DoubleTensor(3,4).bernoulli() : 0.0 0.0 0.0 1.0
0.0 0.0 1.0 0.0
1.0 0.0 1.0 1.0
[torch.DoubleTensor of size 3x4]

DoubleTensor(3,4).normal() : -0.458016629898 0.995056782983 0.193488150253 2.13258610397
0.433506715543 -1.78290733769 2.84319820081 -1.17974410206
1.50336946018 -1.4763249304 -1.32118677602 -0.66363798419
[torch.DoubleTensor of size 3x4]

DoubleTensor(3,4).cauchy() : 0.0749152360911 -1.20223754276 -0.62081612962 -5.04222068329
1.54699572937 -17.001315539 -0.117368858097 -0.298607826832
-0.560873837138 -2.77553964952 29.4415309693 1.19207375275
[torch.DoubleTensor of size 3x4]

DoubleTensor(3,4).exponential() : 2.50801410232 0.685713080448 0.917608916732 2.07486556922
1.89319551891 0.771008351838 0.781047118136 1.48769124823
0.140599574018 0.14400510357 1.36015713598 1.53994863343
[torch.DoubleTensor of size 3x4]

DoubleTensor(3,4).logNormal() : 0.922348804219 0.45513908502 5.07732469947 0.366756474049
3.29436201821 0.522586748667 0.0296626671263 0.416482405422
1.51313417327 0.357280101705 0.119454578503 2.93739618207
[torch.DoubleTensor of size 3x4]

DoubleTensor(3,4).geometric() : 4.0 2.0 3.0 1.0
1.0 3.0 1.0 1.0
1.0 4.0 2.0 3.0
[torch.DoubleTensor of size 3x4]

PASSED
test/testFloatTensor.py::test_float_tensor dir(G) []
test_float_tensor
got float a
a.dims() : 2
a : 0.569749 0.781575
0.167386 0.061411
0.185235 0.159374
[torch.FloatTensor of size 3x2]

a[1][1] = 9
a : 0.569749 0.781575
0.167386 9
0.185235 0.159374
[torch.FloatTensor of size 3x2]

a.size() : 3 2
[torch.LongTensor of size 2]

PASSED
test/testLongTensor.py::test_long_tensor test_long_tensor
a : 2 3
2 1
1 3
[torch.LongTensor of size 3x2]

a[1][1] = 9
a : 2 3
2 9
1 3
[torch.LongTensor of size 3x2]

a.size() : 3 2
[torch.LongTensor of size 2]

a + 2 : 4 5
4 11
3 5
[torch.LongTensor of size 3x2]

a.resize2d(3,3)
a : 2 3 2
9 1 3
64 0 140236132152616
[torch.LongTensor of size 3x3]

PASSED
test/test_pytorch.py::test_pytorch C [[ 0.64205486  1.27048421  0.73362678  0.65500385]
 [ 0.23848413  0.99222374  0.31492215  0.64639091]
 [ 0.18679947  0.59749013  0.23201989  0.36708984]]
calling .asTensor...
 ... asTensor called
tensorA 0.660728 0.865775
0.227968 0.856335
0.18459 0.486066
[torch.FloatTensor of size 3x2]

tensorA 0.660728 0.865775
0.227968 56.4
76.5 0.486066
[torch.FloatTensor of size 3x2]

A [[  0.66072816   0.86577535]
 [  0.22796807  56.40000153]
 [ 76.5          0.48606578]]
add 5 to tensorA
tensorA 5.66073 5.86578
5.22797 61.4
81.5 5.48607
[torch.FloatTensor of size 3x2]

A [[  5.66072798   5.86577511]
 [  5.22796822  61.40000153]
 [ 81.5          5.48606586]]
add 7 to tensorA
tensorA2 12.6607 12.8658
12.228 68.4
88.5 12.4861
[torch.FloatTensor of size 3x2]

tensorA 5.66073 5.86578
5.22797 61.4
81.5 5.48607
[torch.FloatTensor of size 3x2]

tensorAB 5.45356 9.3435 6.11331 4.44185
6.73923 64.2358 11.8506 46.3084
76.1157 56.087 79.264 4.41769
[torch.FloatTensor of size 3x4]

A.dot(B) [[  5.45355511   9.34350491   6.11330509   4.44185495]
 [  6.73922729  64.23577118  11.85061646  46.3083992 ]
 [ 76.11565399  56.08696747  79.26398468   4.41769314]]
tensorA[2] 81.5 5.48607
[torch.FloatTensor of size 2]

D 1 1 1
1 1 1
1 1 1
1 1 1
1 1 1
[torch.FloatTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
1 1 1
1 1 1
[torch.FloatTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
9 9 9
1 1 1
[torch.FloatTensor of size 5x3]

D 1 1 0
1 1 0
1 1 0
9 9 0
1 1 0
[torch.FloatTensor of size 5x3]

0.797003 0.7511 0.320471 0.463891
0.909975 0.198874 0.932414 0.992505
0.588518 0.985965 0.785265 0.154899
[torch.FloatTensor of size 3x4]

1 1 0 0
0 0 0 1
1 0 0 1
[torch.FloatTensor of size 3x4]

-0.666229 -1.03328 -0.578936 0.91043
1.73192 0.713247 -2.01844 1.03066
-1.24727 -1.9082 -0.611837 -2.26149
[torch.FloatTensor of size 3x4]

0.524726 0.473035 -0.760148 -0.860366
-0.600619 3.1926 -1.91201 4.09519
4.39746 0.729905 -18.769 0.512841
[torch.FloatTensor of size 3x4]

0.364652 1.01704 0.801587 2.1703
1.34685 0.12238 1.82516 1.03946
0.347248 0.0367068 2.71453 0.822744
[torch.FloatTensor of size 3x4]

0.311022 0.400699 1.39652 0.172786
0.406925 0.18913 0.632291 0.94026
0.258026 2.46774 0.209306 0.175391
[torch.FloatTensor of size 3x4]

2 2 2 3
1 2 1 1
1 2 2 4
[torch.FloatTensor of size 3x4]

1 1 2 1
1 8 5 1
1 2 1 3
[torch.FloatTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.FloatTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.FloatTensor of size 3x4]

<class 'floattensor.FloatTensor'>
D after resize:
 1 1 0
1 1 0
1 1 0
9 9 0
[torch.FloatTensor of size 4x3]

resize1d -1 -1 -1
[torch.FloatTensor of size 3]

resize2d -1 -1 -1
-1 -1 -1
[torch.FloatTensor of size 2x3]

resize -1 -1 -1
-1 -1 -1
-1 -1 -1
-1 -1 -1
[torch.FloatTensor of size 4x3]

PyTorch.FloatTensor(3,2).nElement() : 6
PyTorch.FloatTensor().nElement() : 0
PyTorch.FloatTensor(1).nElement() : 1
PASSED

========================== 5 passed in 20.07 seconds ===========================
