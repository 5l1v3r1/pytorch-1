initializing PyTorch...
generator null: False
 ... PyTorch initialized
D 1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 1.0
[torch.DoubleTensor of size 5x3]

D 1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 4.0
1.0 1.0 1.0
1.0 1.0 1.0
[torch.DoubleTensor of size 5x3]

D 1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 4.0
9.0 9.0 9.0
1.0 1.0 1.0
[torch.DoubleTensor of size 5x3]

D 1.0 1.0 0.0
1.0 1.0 0.0
1.0 1.0 0.0
9.0 9.0 0.0
1.0 1.0 0.0
[torch.DoubleTensor of size 5x3]

0.0266481263097 0.0385924326256 0.78266332089 0.207765596453
0.206261406653 0.633993169293 0.97095004702 0.847175037488
0.572338792495 0.269468681188 0.457913794788 0.682895284379
[torch.DoubleTensor of size 3x4]

-1.14520659529 -0.593244615899 -0.0147173461224 -0.368783130925
0.0296197698441 0.135285275986 0.701897219217 0.254118824664
0.32433432782 0.847696641887 0.680457419693 0.182871399406
[torch.DoubleTensor of size 3x4]

-1.63046728339 -0.773305285076 0.796703016781 0.450035833589
0.179875895587 0.0594033798163 1.65696057851 0.961987115118
2.19589901602 0.175658074667 2.66705585945 0.688860591156
[torch.DoubleTensor of size 3x4]

6.19888435248 0.249815730092 0.714259048563 0.172659753156
0.73787447676 0.131353332887 0.188654421895 3.3024623299
3.33909129346 0.701005336264 1.5971433982 0.597713392172
[torch.DoubleTensor of size 3x4]

0.286414354248 1.71127052568 0.937563870087 0.0564126591415
0.439085494951 0.0865102742074 2.45997063504 0.946592769779
1.80214543683 0.123918972788 0.220305375168 0.0995736161594
[torch.DoubleTensor of size 3x4]

1.0 0.0 0.0 1.0
0.0 0.0 0.0 0.0
1.0 1.0 1.0 0.0
[torch.DoubleTensor of size 3x4]

4.0 1.0 1.0 3.0
1.0 2.0 1.0 2.0
3.0 1.0 1.0 1.0
[torch.DoubleTensor of size 3x4]

1.0 3.0 1.0 1.0
1.0 1.0 1.0 1.0
1.0 3.0 1.0 1.0
[torch.DoubleTensor of size 3x4]

2.0 1.0 2.0 3.0
1.0 1.0 2.0 2.0
4.0 1.0 4.0 1.0
[torch.DoubleTensor of size 3x4]

2.0 1.0 2.0 3.0
1.0 1.0 2.0 2.0
4.0 1.0 4.0 1.0
[torch.DoubleTensor of size 3x4]

<class 'floattensor.DoubleTensor'>
D after resize:
 1.0 1.0 0.0
1.0 1.0 0.0
1.0 1.0 0.0
9.0 9.0 0.0
[torch.DoubleTensor of size 4x3]

resize1d 1.0 1.0 1.0
[torch.DoubleTensor of size 3]

resize2d 1.0 1.0 1.0
1.0 1.0 1.0
[torch.DoubleTensor of size 2x3]

resize 1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 1.0
1.0 1.0 1.0
[torch.DoubleTensor of size 4x3]

PyTorch.DoubleTensor(3,2).nElement() : 6
PyTorch.DoubleTensor().nElement() : 0
PyTorch.DoubleTensor(1).nElement() : 1
D 1 1 1
1 1 1
1 1 1
1 1 1
1 1 1
[torch.ByteTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
1 1 1
1 1 1
[torch.ByteTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
9 9 9
1 1 1
[torch.ByteTensor of size 5x3]

D 1 1 0
1 1 0
1 1 0
9 9 0
1 1 0
[torch.ByteTensor of size 5x3]

1 1 1 1
1 1 1 0
1 1 1 1
[torch.ByteTensor of size 3x4]

2 1 1 1
2 1 2 4
1 3 2 6
[torch.ByteTensor of size 3x4]

1 1 1 2
1 1 2 2
1 1 1 1
[torch.ByteTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.ByteTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.ByteTensor of size 3x4]

<class 'floattensor.ByteTensor'>
D after resize:
 1 1 0
1 1 0
1 1 0
9 9 0
[torch.ByteTensor of size 4x3]

resize1d 1 1 1
[torch.ByteTensor of size 3]

resize2d 1 1 1
1 1 1
[torch.ByteTensor of size 2x3]

resize 1 1 1
1 1 1
1 1 1
1 1 1
[torch.ByteTensor of size 4x3]

PyTorch.ByteTensor(3,2).nElement() : 6
PyTorch.ByteTensor().nElement() : 0
PyTorch.ByteTensor(1).nElement() : 1
C [[ 0.07237029  0.67830926  0.24837615  0.42350942]
 [ 0.08873211  0.59374821  0.28608489  0.34134924]
 [ 0.02051457  0.12791677  0.06541652  0.0719227 ]]
calling .asTensor...
 ... asTensor called
tensorA 0.319978 0.513651
0.429295 0.329714
0.100705 0.0644289
[torch.FloatTensor of size 3x2]

tensorA 0.319978 0.513651
0.429295 56.4
76.5 0.0644289
[torch.FloatTensor of size 3x2]

A [[  3.19977760e-01   5.13651311e-01]
 [  4.29294676e-01   5.64000015e+01]
 [  7.65000000e+01   6.44288883e-02]]
add 5 to tensorA
tensorA 5.31998 5.51365
5.42929 61.4
81.5 5.06443
[torch.FloatTensor of size 3x2]

A [[  5.31997776   5.51365137]
 [  5.42929459  61.40000153]
 [ 81.5          5.06442881]]
add 7 to tensorA
tensorA2 12.32 12.5137
12.4293 68.4
88.5 12.0644
[torch.FloatTensor of size 3x2]

tensorA 5.31998 5.51365
5.42929 61.4
81.5 5.06443
[torch.FloatTensor of size 3x2]

tensorAB 1.13282 8.61437 3.73255 5.13123
2.45378 57.8728 11.1252 40.4377
15.5069 62.0929 46.7657 28.4937
[torch.FloatTensor of size 3x4]

A.dot(B) [[  1.13282001   8.61436844   3.73254681   5.13122559]
 [  2.45377827  57.87283707  11.12515545  40.43766785]
 [ 15.5068903   62.09285355  46.76571274  28.49367905]]
tensorA[2] 81.5 5.06443
[torch.FloatTensor of size 2]

D 1 1 1
1 1 1
1 1 1
1 1 1
1 1 1
[torch.FloatTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
1 1 1
1 1 1
[torch.FloatTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
9 9 9
1 1 1
[torch.FloatTensor of size 5x3]

D 1 1 0
1 1 0
1 1 0
9 9 0
1 1 0
[torch.FloatTensor of size 5x3]

0.125585 0.0406307 0.207243 0.247888
0.0514672 0.0935515 0.44081 0.694824
0.0298762 0.14537 0.456833 0.453172
[torch.FloatTensor of size 3x4]

-0.41263 -0.561561 -0.166406 0.919743
-0.520665 -1.04209 -1.86076 -1.19507
1.68462 0.255782 -2.51445 -0.97466
[torch.FloatTensor of size 3x4]

-0.943492 -0.31674 -0.273227 0.167324
-0.808787 -0.696445 0.694108 0.279047
-0.189283 -0.854515 -1.86217 -0.143578
[torch.FloatTensor of size 3x4]

0.786687 1.41744 1.51556 1.70139
0.365807 0.297847 0.250975 2.23554
0.490976 1.26735 2.75488 0.0208299
[torch.FloatTensor of size 3x4]

0.897022 0.402322 0.26393 0.165471
2.96383 0.119081 0.922968 0.155653
0.171086 1.12825 1.33951 0.916772
[torch.FloatTensor of size 3x4]

0 0 0 0
1 1 1 1
1 0 1 0
[torch.FloatTensor of size 3x4]

1 2 1 1
1 2 3 2
2 3 1 3
[torch.FloatTensor of size 3x4]

1 1 1 1
1 3 1 1
2 3 1 2
[torch.FloatTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.FloatTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.FloatTensor of size 3x4]

<class 'floattensor.FloatTensor'>
D after resize:
 1 1 0
1 1 0
1 1 0
9 9 0
[torch.FloatTensor of size 4x3]

resize1d 1 1 1
[torch.FloatTensor of size 3]

resize2d 1 1 1
1 1 1
[torch.FloatTensor of size 2x3]

resize 1 1 1
1 1 1
1 1 1
1 1 1
[torch.FloatTensor of size 4x3]

PyTorch.FloatTensor(3,2).nElement() : 6
PyTorch.FloatTensor().nElement() : 0
PyTorch.FloatTensor(1).nElement() : 1
D 1 1 1
1 1 1
1 1 1
1 1 1
1 1 1
[torch.LongTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
1 1 1
1 1 1
[torch.LongTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
9 9 9
1 1 1
[torch.LongTensor of size 5x3]

D 1 1 0
1 1 0
1 1 0
9 9 0
1 1 0
[torch.LongTensor of size 5x3]

1 1 1 1
1 1 1 0
1 1 1 1
[torch.LongTensor of size 3x4]

2 1 1 1
2 1 2 4
1 3 2 6
[torch.LongTensor of size 3x4]

1 1 1 2
1 1 2 2
1 1 1 1
[torch.LongTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.LongTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.LongTensor of size 3x4]

<class 'floattensor.LongTensor'>
D after resize:
 1 1 0
1 1 0
1 1 0
9 9 0
[torch.LongTensor of size 4x3]

resize1d 1 1 1
[torch.LongTensor of size 3]

resize2d 1 1 1
1 1 1
[torch.LongTensor of size 2x3]

resize 1 1 1
1 1 1
1 1 1
1 1 1
[torch.LongTensor of size 4x3]

PyTorch.LongTensor(3,2).nElement() : 6
PyTorch.LongTensor().nElement() : 0
PyTorch.LongTensor(1).nElement() : 1
