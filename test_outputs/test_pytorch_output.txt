initializing PyTorch...
generator null: False
 ... PyTorch initialized
C [[ 0.6572811   0.41734096  0.30723652  0.62966114]
 [ 0.53632325  0.57466948  0.17813542  0.75435603]
 [ 0.70470619  0.74081689  0.23848638  0.97652483]]
calling .asTensor...
 ... asTensor called
tensorA 0.508858 0.462486
0.228143 0.711774
0.311176 0.914854
[torch.FloatTensor of size 3x2]

tensorA 0.508858 0.462486
0.228143 56.4
76.5 0.914854
[torch.FloatTensor of size 3x2]

A [[  0.50885767   0.46248606]
 [  0.22814284  56.40000153]
 [ 76.5          0.91485357]]
add 5 to tensorA
tensorA 5.50886 5.46249
5.22814 61.4
81.5 5.91485
[torch.FloatTensor of size 3x2]

A [[  5.50885773   5.46248627]
 [  5.22814274  61.40000153]
 [ 81.5          5.91485357]]
add 7 to tensorA
tensorA2 12.5089 12.4625
12.2281 68.4
88.5 12.9149
[torch.FloatTensor of size 3x2]

tensorA 5.50886 5.46249
5.22814 61.4
81.5 5.91485
[torch.FloatTensor of size 3x2]

tensorAB 7.33395 4.86819 3.3626 7.24307
33.8896 47.8119 7.69235 59.4823
72.6217 14.4751 43.7505 37.0639
[torch.FloatTensor of size 3x4]

A.dot(B) [[  7.33394909   4.86818504   3.3626039    7.24307156]
 [ 33.88961029  47.81191254   7.69234562  59.48233795]
 [ 72.62173462  14.47514915  43.75053787  37.06393814]]
tensorA[2] 81.5 5.91485
[torch.FloatTensor of size 2]

D 1 1 1
1 1 1
1 1 1
1 1 1
1 1 1
[torch.FloatTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
1 1 1
1 1 1
[torch.FloatTensor of size 5x3]

D 1 1 1
1 1 1
1 1 4
9 9 9
1 1 1
[torch.FloatTensor of size 5x3]

D 1 1 0
1 1 0
1 1 0
9 9 0
1 1 0
[torch.FloatTensor of size 5x3]

0.0422519 0.722106 0.766731 0.446178
0.434789 0.363077 0.240096 0.863655
0.658687 0.661885 0.563456 0.202257
[torch.FloatTensor of size 3x4]

0 0 0 1
0 0 0 1
0 0 0 1
[torch.FloatTensor of size 3x4]

0.986943 2.3816 0.684138 1.05409
-1.08006 0.773031 0.63893 -1.53327
-2.37315 0.0458792 -1.67234 0.850244
[torch.FloatTensor of size 3x4]

1.08748 0.325471 -161.609 -0.692461
-0.574637 -0.363116 5.99516 -0.42856
0.888686 -0.504575 -0.687464 -2.34007
[torch.FloatTensor of size 3x4]

0.82442 0.295883 0.012076 1.83264
2.77256 0.2921 0.606926 0.257273
0.992444 0.670133 0.0325318 2.55188
[torch.FloatTensor of size 3x4]

2.74619 0.18841 1.58797 0.113994
0.348283 4.39056 0.132273 0.530852
0.860218 0.0917725 0.168071 0.553567
[torch.FloatTensor of size 3x4]

1 3 1 3
1 2 1 1
1 2 3 1
[torch.FloatTensor of size 3x4]

1 1 2 1
1 1 1 1
5 1 1 3
[torch.FloatTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.FloatTensor of size 3x4]

2 1 2 3
1 1 2 2
4 1 4 1
[torch.FloatTensor of size 3x4]

<class 'floattensor.FloatTensor'>
D after resize:
 1 1 0
1 1 0
1 1 0
9 9 0
[torch.FloatTensor of size 4x3]

resize1d -1 -1 -1
[torch.FloatTensor of size 3]

resize2d -1 -1 -1
-1 -1 -1
[torch.FloatTensor of size 2x3]

resize -1 -1 -1
-1 -1 -1
-1 -1 -1
-1 -1 -1
[torch.FloatTensor of size 4x3]

PyTorch.FloatTensor(3,2).nElement() : 6
PyTorch.FloatTensor().nElement() : 0
PyTorch.FloatTensor(1).nElement() : 1
